/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

/**
 *Q
 * @author Harry
 */
public class FrmSearchDoctor extends javax.swing.JFrame implements FocusListener, KeyListener{

    /**
     * Creates new form FrmSearch
     */
    Connection con;
    Statement st;
    ResultSet rs;
    String sqlDiseaseOnly;
    String sqlDiseaseAndProvider;
    SubFrame sub;
    
    private Color colorBackExited;
    private Color colorForeExited;    
    
    public FrmSearchDoctor() {
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HealthCareService;user=sa;password=sathya123;");   
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        SimpleButton();
        
        initComponents();
        
        colorBackExited = lblClose.getBackground();
        colorForeExited = lblClose.getForeground();
        
        sub = new SubFrame(jPanel1, this, new Color(0, 160, 174), 1);
//        sub = new SubFrame(jPanel1, this, new Color(255, 2, 0), 3);
        sub.closeButton(lblClose, this, colorBackExited, colorForeExited);

        GetProvider();
        GetDisease();
        jLabel1.requestFocus();       
//        setBorder();
        setBackground();
        ConfigControl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbDisease = new javax.swing.JComboBox<>();
        cmbProvider = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        lblClose = new javax.swing.JLabel();

        setUndecorated(true);

        jLabel1.setBackground(new java.awt.Color(0, 102, 255));
        jLabel1.setFont(new java.awt.Font("Microsoft Yi Baiti", 0, 55)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Find Doctor");

        cmbDisease.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        cmbDisease.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Disease" }));

        cmbProvider.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        cmbProvider.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any Provider" }));

        btnSearch.setFont(new java.awt.Font("Malgun Gothic", 0, 24)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblClose.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 12)); // NOI18N
        lblClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClose.setText("X");
        lblClose.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))
                    .addComponent(cmbDisease, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbProvider, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addComponent(cmbDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbProvider, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //this.setEnabled(false);
        InitQuery();
        try {
            st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            if(!cmbDisease.getSelectedItem().toString().equals("Select a Disease")&&cmbProvider.getSelectedItem().toString().equals("Any Provider"))
            {
                rs = st.executeQuery(sqlDiseaseOnly);
            }
            else if(!cmbDisease.getSelectedItem().toString().equals("Select a Disease")&&!cmbProvider.getSelectedItem().toString().equals("Any Provider"))
            {
                rs = st.executeQuery(sqlDiseaseAndProvider);
            }
            
            FrmSearchResult frm = new FrmSearchResult(rs);
            frm.setVisible(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmSearchDoctor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSearchDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSearchDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSearchDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSearchDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmSearchDoctor().setVisible(true);
            }
        });
    }
    
    private void SimpleButton()
    {
        try
        {
            for (UIManager.LookAndFeelInfo lnf : 
                UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(lnf.getName())) {
                UIManager.setLookAndFeel(lnf.getClassName());
                break;
                }
        }
        } catch (Exception e) { /* Lazy handling this >.> */ }
        
    }
    
    private void ConfigControl()
    {
        btnSearch.setFocusPainted(false);
         
    }
//    private void setBorder()
//    {
//        getRootPane().setBorder(BorderFactory.createLineBorder(new Color(255,2,0), 3, true));
//    }
    private void setBackground()
    {
        getContentPane().setBackground(Color.WHITE);
        cmbProvider.setBackground(Color.WHITE);
        cmbDisease.setBackground(Color.WHITE);
        btnSearch.setBackground(new Color(204,0,0));
        btnSearch.setForeground(new Color(255,255,255));
    }
    private void GetProvider()
    {
        try
        {
            String sql = "select * from Provider";
            st = con.createStatement();
            rs = st.executeQuery(sql);
        while(rs.next())
        {
            cmbProvider.addItem(rs.getString("NAME"));
        }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    private void GetDoctorSpecality()
    {
        try
        {
            String sql = "select * from Doctor";
            st = con.createStatement();
            rs = st.executeQuery(sql);
        while(rs.next())
        {
            cmbProvider.addItem(rs.getString("NAME"));
        }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    private void GetDisease()
    {
        String sql = "Select * from Disease";
        try
        {
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next())
            {
                cmbDisease.addItem(rs.getString("Name"));
            }
        }catch (Exception e)
        {
            e.printStackTrace();
        }
        
    }
    private void InitQuery()
    {
        sqlDiseaseOnly = "select D.ID as [Doctor ID], (D.[First Name]+' '+D.[Last Name]) as [Full Name], P.NAME as Provider , Di.Name as [Disease Name]\n" +
                                        "from ((Doctor D inner join Provider P on D.[Provider.ID] = P.ID)\n" +
                                        "inner join Cure C on C.[Doctor.ID] = D.ID)\n" +
                                        "inner join Disease Di on Di.ID = C.[Disease.ID]\n" +
                                        "where Di.Name = '"+cmbDisease.getSelectedItem().toString()+"'";
        sqlDiseaseAndProvider = "select D.ID as [Doctor ID], (D.[First Name]+' '+D.[Last Name]) as [Full Name], P.NAME as Provider , Di.Name as [Disease Name]\n" +
                                        "from ((Doctor D inner join Provider P on D.[Provider.ID] = P.ID)\n" +
                                        "inner join Cure C on C.[Doctor.ID] = D.ID)\n" +
                                        "inner join Disease Di on Di.ID = C.[Disease.ID]\n" +
                                        "where Di.Name = '"+cmbDisease.getSelectedItem().toString()+"' and P.NAME = '"+cmbProvider.getSelectedItem().toString()+"'";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbDisease;
    private javax.swing.JComboBox<String> cmbProvider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblClose;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusGained(FocusEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //TextFieldBehavior.FocusGained(txtField, "Specality");
    }

    @Override
    public void focusLost(FocusEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //TextFieldBehavior.KeyTyped(txtField, "Specality");
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //TextFieldBehavior.KeyReleased(txtField, "Specality");
    }
}
